import{createQuickAccess,dashesToCamelCase,camelCaseToDashes}from"./tools.js";function createShadowDOM(a,b){const c=window.webComponentTemplates.get(b);window.ShadyCSS&&(window.ShadyCSS.prepareTemplate(c,b),window.ShadyCSS.styleElement(a));const d=a.attachShadow({mode:"open"});d.appendChild(c.content.cloneNode(!0))}function ensureQuickAccess(a){a.$||(a.$=createQuickAccess(a.shadowRoot,"id"),a.$$=b=>a.shadowRoot.querySelector(b),a.$$$=b=>Array.from(a.shadowRoot.querySelectorAll(b)))}function handleConnected(a,b){ensureQuickAccess(a),b&&(Object.keys(b).forEach(c=>{const d=b[c],e=camelCaseToDashes(c);Object.defineProperty(a,c,{get(){return a._properties[c]},set(b){const f=a._properties[c];let g=a=>a.toString();switch(d.type){case Array:a._properties[c]="string"==typeof b?JSON.parse(b):Array.isArray(b)?b:[],g=a=>JSON.stringify(a);break;case Boolean:a._properties[c]=b&&"false"!==b,g=()=>"";break;case Number:a._properties[c]=+b||0;break;case Object:a._properties[c]="string"==typeof b?JSON.parse(b):"object"==typeof b?b:{},g=a=>JSON.stringify(a);break;case String:a._properties[c]=b+""||"";}d.observer&&(a[d.observer]?f!==a._properties[c]&&a[d.observer](a._properties[c],f):console.warn(`The observer with the name: '${d.observer}' was not found inside the class for web component ${a.constructor.is}. Make sure that you added a public function with the name '${d.observer}' to the class.`)),d.reflectToAttribute&&(a._properties[c]?a.setAttribute(e,g(a._properties[c])):a.removeAttribute(e))}})}),Object.keys(b).forEach(c=>{const d=b[c],e=camelCaseToDashes(c);let f;if(a.hasAttribute(e)&&(f=a.getAttribute(e)),d.reflectToAttribute||void 0===a[c])if(void 0!==f)switch(d.type){case Array:a[c]=JSON.parse(f);break;case Boolean:a[c]="false"!==f;break;case Number:a[c]=+f;break;case Object:a[c]=JSON.parse(f);break;case String:a[c]=f+"";}else switch(d.type){case Array:a[c]=d.value||[];break;case Boolean:a[c]=d.value||!1;break;case Number:a[c]=d.value||0;break;case Object:a[c]=d.value||{};break;case String:a[c]=d.value||"";}}))}const base="web-component-base-element";export class webComponentBaseClass extends HTMLElement{static get is(){return base}static get template(){return this.is}static get properties(){return{}}static get observedAttributes(){return this.properties?Object.keys(this.properties).map(a=>camelCaseToDashes(a)):[]}constructor(){super(),this._properties={},this.$=null,this.$$=()=>null,this.$$$=()=>[],console.assert(this.constructor.is!==base,"Error, make sure that the web component implements: static get is() { return \"name-of-your-web-component\"; }"),createShadowDOM(this,this.constructor.template),this.eventHandlers=[]}connectedCallback(){handleConnected(this,this.constructor.properties),this.attached&&this.attached(),this.onAttached&&this.onAttached(),Object.defineProperty(this,"onAttached",{get(){},set(a){a()}})}disconnectedCallback(){this.detached&&this.detached(),this.onDetached&&this.onDetached(),this.eventHandlers.forEach(a=>{a.element.removeEventListener(a.event,a.handler)})}attributeChangedCallback(a,b,c){const d=dashesToCamelCase(a);ensureQuickAccess(this),this.constructor.properties[d]&&this.constructor.properties[d].type===Boolean&&(b=""===b||"false"!==b,c=""===c||"false"!==c),b!==c&&this.hasAttribute(a)&&(this[d]=c)}addAutoEventListener(a,b,c){this.eventHandlers.find(d=>d.element===a&&d.event===b&&d.handler===c)||(this.eventHandlers.push({element:a,event:b,handler:c}),a.addEventListener(b,c))}removeAutoEventListener(a,b,c){const d=this.eventHandlers.findIndex(d=>d.element===a&&d.event===b&&d.handler===c);-1!==d&&(this.eventHandlers.splice(d,1),a.removeEventListener(b,c))}refreshQuickAccess(){this.$=createQuickAccess(this.shadowRoot,"id")}}
//# sourceMappingURL=webComponentBaseClass.js.map