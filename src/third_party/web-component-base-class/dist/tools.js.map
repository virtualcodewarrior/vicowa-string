{"version":3,"sources":["tools.js"],"names":["dashesToCamelCase","p_String","replace","p_Char","toUpperCase","camelCaseToDashes","length","toLowerCase","createQuickAccess","p_HTMLElement","p_Tag","Array","from","querySelectorAll","reduce","p_Previous","p_Element","getAttribute"],"mappings":"AAKA,MAAO,SAASA,kBAAT,CAA2BC,CAA3B,CAAqC,CAAE,MAAOA,GAASC,OAAT,CAAiB,iBAAjB,CAAqCC,CAAD,EAAYA,EAAO,CAAP,EAAUC,WAAV,EAAhD,EAAyEF,OAAzE,CAAiF,KAAjF,CAAwF,EAAxF,CAA8F,CAOnJ,MAAO,SAASG,kBAAT,CAA2BJ,CAA3B,CAAqC,CAAE,MAAOA,GAASC,OAAT,CAAiB,cAAjB,CAAkCC,CAAD,EAA8B,CAAhB,GAAOG,MAAR,CAAuB,GAAEH,EAAO,CAAP,CAAU,IAAGA,EAAO,CAAP,EAAUI,WAAV,EAAwB,EAA9D,CAAmE,IAAGJ,EAAO,CAAP,EAAUI,WAAV,EAAwB,EAA5I,CAAkJ,CASvM,MAAO,SAASC,kBAAT,CAA2BC,CAA3B,CAA0CC,CAA1C,CAAiD,CACvD,MAAOC,OAAMC,IAAN,CAAWH,EAAcI,gBAAd,CAAgC,IAAGH,CAAM,GAAzC,CAAX,EAAyDI,MAAzD,CAAgE,CAACC,CAAD,CAAaC,CAAb,IAA6BD,EAAWf,kBAAkBgB,EAAUC,YAAV,CAAuBP,CAAvB,CAAlB,CAAX,EAA+DM,CAA5F,CAA8GD,CAA9G,CAAhE,CAA6L,EAA7L,CACP","sourcesContent":["/**\n * Converts a string consisting of dashes to camel case, e.g. test-with-dashes becomes testWithDashes\n * @param {string} p_String The input string that will be converted\n * @returns {string} An output string in camel case\n */\nexport function dashesToCamelCase(p_String) { return p_String.replace(/-([a-z0-9A-Z])/g, (p_Char) => p_Char[1].toUpperCase()).replace(/-$/g, ''); }\n\n/**\n * Converts a camel case string to an all lower case string containing dashes. e.g. testString becomes test-string and Test becomes test\n * @param {string} p_String The input string that will be converted\n * @returns {string} The resulting all lower case string\n */\nexport function camelCaseToDashes(p_String) { return p_String.replace(/[a-z]?[A-Z]/g, (p_Char) => ((p_Char.length > 1) ? `${p_Char[0]}-${p_Char[1].toLowerCase()}` : `-${p_Char[0].toLowerCase()}`)); }\n\n/**\n * Get the child elements of the given HTMLElement and finds the attribute using the given key. It then puts all those objects in an object for quick access\n * This only will give the expected results if all values for the keys are unique\n * @param {HTMLElement|DocumentFragment|ShadowRoot} p_HTMLElement The HTMElement that contains the children for which we want to retrieve the keys\n * @param {string} p_Tag The attribute tag for which we are building this object (e.g. 'id')\n * @returns {object} An object where each member references the HTMLElement that had the attribute with the given tag, attributes with dashes are converted to camel case\n */\nexport function createQuickAccess(p_HTMLElement, p_Tag) {\n\treturn Array.from(p_HTMLElement.querySelectorAll(`[${p_Tag}]`)).reduce((p_Previous, p_Element) => { p_Previous[dashesToCamelCase(p_Element.getAttribute(p_Tag))] = p_Element; return p_Previous; }, {});\n}\n"]}