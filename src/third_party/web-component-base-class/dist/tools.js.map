{"version":3,"sources":["../src/tools.js"],"names":["dashesToCamelCase","p_String","replace","p_Char","toUpperCase","camelCaseToDashes","length","toLowerCase","createQuickAccess","p_HTMLElement","p_Tag","Array","from","querySelectorAll","reduce","p_Previous","p_Element","getAttribute"],"mappings":"OAKO,SAASA,kBAAkBC,GAAY,OAAOA,EAASC,QAAQ,kBAAoBC,GAAWA,EAAO,GAAGC,eAAeF,QAAQ,MAAO,WAOtI,SAASG,kBAAkBJ,GAAY,OAAOA,EAASC,QAAQ,eAAiBC,GAAaA,EAAOG,OAAS,KAAQH,EAAO,MAAMA,EAAO,GAAGI,oBAAsBJ,EAAO,GAAGI,wBAS5K,SAASC,kBAAkBC,EAAeC,GAChD,OAAOC,MAAMC,KAAKH,EAAcI,qBAAqBH,OAAWI,OAAO,CAACC,EAAYC,KAAgBD,EAAWf,kBAAkBgB,EAAUC,aAAaP,KAAWM,EAAkBD,GAAe","file":"tools.js","sourcesContent":["/**\n * Converts a string consisting of dashes to camel case, e.g. test-with-dashes becomes testWithDashes\n * @param {string} p_String The input string that will be converted\n * @returns {string} An output string in camel case\n */\nexport function dashesToCamelCase(p_String) { return p_String.replace(/-([a-z0-9A-Z])/g, (p_Char) => p_Char[1].toUpperCase()).replace(/-$/g, ''); }\n\n/**\n * Converts a camel case string to an all lower case string containing dashes. e.g. testString becomes test-string and Test becomes test\n * @param {string} p_String The input string that will be converted\n * @returns {string} The resulting all lower case string\n */\nexport function camelCaseToDashes(p_String) { return p_String.replace(/[a-z]?[A-Z]/g, (p_Char) => ((p_Char.length > 1) ? `${p_Char[0]}-${p_Char[1].toLowerCase()}` : `-${p_Char[0].toLowerCase()}`)); }\n\n/**\n * Get the child elements of the given HTMLElement and finds the attribute using the given key. It then puts all those objects in an object for quick access\n * This only will give the expected results if all values for the keys are unique\n * @param {HTMLElement|DocumentFragment|Document|ShadowRoot} p_HTMLElement The HTMElement that contains the children for which we want to retrieve the keys\n * @param {string} p_Tag The attribute tag for which we are building this object (e.g. 'id')\n * @returns {object} An object where each member references the HTMLElement that had the attribute with the given tag, attributes with dashes are converted to camel case\n */\nexport function createQuickAccess(p_HTMLElement, p_Tag) {\n\treturn Array.from(p_HTMLElement.querySelectorAll(`[${p_Tag}]`)).reduce((p_Previous, p_Element) => { p_Previous[dashesToCamelCase(p_Element.getAttribute(p_Tag))] = p_Element; return p_Previous; }, {});\n}\n"]}