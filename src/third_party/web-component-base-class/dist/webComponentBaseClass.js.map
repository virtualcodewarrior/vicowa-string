{"version":3,"sources":["../src/webComponentBaseClass.js"],"names":["createQuickAccess","dashesToCamelCase","camelCaseToDashes","propertiesKey","Symbol","ensureQuickAccess","p_ComponentInstance","$","shadowRoot","$$","p_Selector","querySelector","$$$","Array","from","querySelectorAll","base","webComponentBaseClass","HTMLElement","is","template","properties","observedAttributes","this","Object","keys","map","p_Name","[object Object]","super","console","assert","constructor","p_ComponentTemplate","tempDiv","document","createElement","innerHTML","trim","templateInstance","firstChild","attachShadow","mode","appendChild","content","cloneNode","createShadowDOM","eventHandlers","p_Properties","originalValues","forEach","p_PropertyKey","property","attributeName","defineProperty","get","p_Value","oldValue","toAttribute","p_ConvertValue","toString","type","JSON","parse","isArray","stringify","Boolean","Number","undefined","String","observer","warn","reflectToAttribute","setAttribute","removeAttribute","userInitialized","originalValue","hasAttribute","getAttribute","value","handleConnected","attached","onAttached","p_Callback","detached","onDetached","p_Handler","element","removeEventListener","event","handler","p_Attribute","p_OldValue","p_NewValue","propertyName","p_Element","p_EventName","find","push","addEventListener","eventIndex","findIndex","splice"],"mappings":"4BAASA,uBAAmBC,uBAAmBC,MAAyB,aAExE,MAAMC,EAAgBC,OAAO,cAwB7B,SAASC,EAAkBC,GACrBA,EAAoBC,IACxBD,EAAoBC,EAAIP,EAAkBM,EAAoBE,WAAY,MAC1EF,EAAoBG,GAAMC,GAAeJ,EAAoBE,WAAWG,cAAcD,GACtFJ,EAAoBM,IAAOF,GAAeG,MAAMC,KAAKR,EAAoBE,WAAWO,iBAAiBL,KAwJvG,MAAMM,EAAO,oCAEN,MAAMC,8BAA8BC,YAK1CC,gBAAkB,OAAOH,EAMzBI,sBAAwB,MAAO,GAK/BC,wBAA0B,MAAO,GAKjCC,gCAAkC,OAAQC,KAAe,WAAIC,OAAOC,KAAKF,KAAKF,YAAYK,IAAKC,GAAWzB,EAAkByB,IAAW,GAKvIC,cACCC,QACAN,KAAKpB,GAAiB,GACtBoB,KAAKhB,EAAI,KACTgB,KAAKd,GAAK,IAAM,KAChBc,KAAKX,IAAM,IAAM,GACjBkB,QAAQC,OAAOR,KAAKS,YAAYb,KAAOH,EAAM,gHA/M/C,SAAyBV,EAAqB2B,GAE7C,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAYJ,EAAoBK,OACxC,MAAMC,EAAmBL,EAAQM,WAGdlC,EAAoBmC,aAAa,CAAEC,KAAM,SACjDC,YAAYJ,EAAiBK,QAAQC,WAAU,IAwMzDC,CAAgBvB,KAAMA,KAAKS,YAAYZ,UACvCG,KAAKwB,cAAgB,GAMtBnB,qBAzLD,SAAyBtB,EAAqB0C,GAE7C,GADA3C,EAAkBC,GACd0C,EAAc,CACjB,MAAMC,EAAiB,GAEvBzB,OAAOC,KAAKuB,GAAcE,QAASC,IAClC,MAAMC,EAAWJ,EAAaG,GACxBE,EAAgBnD,EAAkBiD,GAExCF,EAAeE,GAAiB7C,EAAoB6C,GAEpD3B,OAAO8B,eAAehD,EAAqB6C,EAAe,CACzDI,IAAG,IAAYjD,EAAoBH,GAAegD,GAClDvB,IAAI4B,GACH,MAAMC,EAAWnD,EAAoBH,GAAegD,GACpD,IAAIO,EAAeC,GAAmBA,EAAeC,WACrD,OAAQR,EAASS,MAChB,KAAKhD,MAAOP,EAAoBH,GAAegD,GAAqC,iBAAZK,EAAwBM,KAAKC,MAAMP,GAAW3C,MAAMmD,QAAQR,GAAWA,EAAU,GAAIE,EAAeC,GAAmBG,KAAKG,UAAUN,GAAiB,MAC/N,KAAKO,QAAS5D,EAAoBH,GAAegD,GAAiBK,GAAuB,UAAZA,EAAqBE,EAAc,IAAM,GAAI,MAC1H,KAAKS,OAAQ7D,EAAoBH,GAAegD,SAA+BiB,IAAZZ,EAAyB,EAAIW,OAAOX,KAAa,EAAG,MACvH,KAAKhC,OAAQlB,EAAoBH,GAAegD,GAAqC,iBAAZK,EAAwBM,KAAKC,MAAMP,GAA+B,iBAAZA,EAAwBA,EAAU,GAAIE,EAAeC,GAAmBG,KAAKG,UAAUN,GAAiB,MACvO,KAAKU,OAAQ/D,EAAoBH,GAAegD,IAAkB,MAACK,EAA6C,GAAKa,OAAOb,KAAa,GAEtIJ,EAASkB,WACqB,mBAAtBlB,EAASkB,SACfb,IAAanD,EAAoBH,GAAegD,IACnDC,EAASkB,SAAShE,EAAqBA,EAAoBH,GAAegD,GAAgBM,GAEjFnD,EAAoB8C,EAASkB,UACnCb,IAAanD,EAAoBH,GAAegD,IACnD7C,EAAoB8C,EAASkB,UAAUhE,EAAoBH,GAAegD,GAAgBM,GAG3F3B,QAAQyC,qCAAqCnB,EAASkB,8DAA8DhE,EAAoB0B,YAAYb,iEAAiEiC,EAASkB,4BAG5NlB,EAASoB,qBACRlE,EAAoBH,GAAegD,GACtC7C,EAAoBmE,aAAapB,EAAeK,EAAYpD,EAAoBH,GAAegD,KAE/F7C,EAAoBoE,gBAAgBrB,SAOzC7B,OAAOC,KAAKuB,GAAcE,QAASC,IAClC,MAAMC,EAAWJ,EAAaG,GACxBE,EAAgBnD,EAAkBiD,GACxC,IAAIwB,EACAC,EAAgB3B,EAAeE,IAAkB,KAErD,GAAIyB,EACH,OAAQxB,EAASS,MAChB,KAAKhD,MACAA,MAAMmD,QAAQY,GACjBtE,EAAoB6C,GAAiByB,EAErCA,EAAgB,KAEjB,MACD,KAAKV,QACyB,kBAAlBU,EACVtE,EAAoB6C,GAAiByB,EAErCA,EAAgB,KAEjB,MACD,KAAKT,OACyB,iBAAlBS,EACVtE,EAAoB6C,GAAiByB,EAErCA,EAAgB,KAEjB,MACD,KAAKpD,OACyB,iBAAlBoD,EACVtE,EAAoB6C,GAAiByB,EAErCA,EAAgB,KAEjB,MACD,KAAKP,OACyB,iBAAlBO,EACVtE,EAAoB6C,GAAiByB,EAErCA,EAAgB,KAWpB,GAJItE,EAAoBuE,aAAaxB,KACpCsB,EAAkBrE,EAAoBwE,aAAazB,IAGhDD,EAASoB,yBAA6DJ,IAAvC9D,EAAoB6C,GAEtD,QAAwBiB,IAApBO,EACH,OAAQvB,EAASS,MAChB,KAAKhD,MACJP,EAAoB6C,GAAiBW,KAAKC,MAAMY,GAChD,MACD,KAAKT,QACJ5D,EAAoB6C,GAAqC,UAApBwB,EACrC,MACD,KAAKR,OACJ7D,EAAoB6C,GAAiBgB,OAAOQ,GAC5C,MACD,KAAKnD,OACJlB,EAAoB6C,GAAiBW,KAAKC,MAAMY,GAChD,MACD,KAAKN,OACJ/D,EAAoB6C,GAAiBkB,OAAOM,QAI9C,OAAQvB,EAASS,MAChB,KAAKhD,MACJP,EAAoB6C,GAAiBC,EAAS2B,OAAS,GACvD,MACD,KAAKb,QACJ5D,EAAoB6C,GAAiBC,EAAS2B,QAAS,EACvD,MACD,KAAKZ,OACJ7D,EAAoB6C,GAAiBC,EAAS2B,OAAS,EACvD,MACD,KAAKvD,OACJlB,EAAoB6C,GAAiBC,EAAS2B,OAAS,GACvD,MACD,KAAKV,OACJ/D,EAAoB6C,GAAiBC,EAAS2B,OAAS,OAqD5DC,CAAgBzD,KAAMA,KAAKS,YAAYX,YAEnCE,KAAK0D,UACR1D,KAAK0D,WAGF1D,KAAK2D,YACR3D,KAAK2D,WAAW3D,MAKjBC,OAAO8B,eAAe/B,KAAM,aAAc,CACzCK,QACAA,IAAIuD,GAAcA,EAAW5D,SAO/BK,uBAEKL,KAAK6D,UACR7D,KAAK6D,WAGF7D,KAAK8D,YACR9D,KAAK8D,WAAW9D,MAGjBA,KAAKwB,cAAcG,QAASoC,IAAgBA,EAAUC,QAAQC,oBAAoBF,EAAUG,MAAOH,EAAUI,WAS9G9D,yBAAyB+D,EAAaC,EAAYC,GACjD,MAAMC,EAAe7F,EAAkB0F,GACvCtF,EAAkBkB,MAEdA,KAAKS,YAAYX,WAAWyE,IAAiBvE,KAAKS,YAAYX,WAAWyE,GAAcjC,OAASK,UACnG0B,KAA+B,KAAfA,GAAsBA,GAA6B,UAAfA,GACpDC,KAA+B,KAAfA,GAAsBA,GAA6B,UAAfA,IAGjDD,IAAeC,IAClBtE,KAAKuE,GAAgBD,GAUvBjE,qBAAqBmE,EAAWC,EAAab,GACvC5D,KAAKwB,cAAckD,KAAMX,GAAcA,EAAUC,UAAYQ,GAAaT,EAAUG,QAAUO,GAAeV,EAAUI,UAAYP,KACvI5D,KAAKwB,cAAcmD,KAAK,CAAEX,QAASQ,EAAWN,MAAOO,EAAaN,QAASP,IAC3EY,EAAUI,iBAAiBH,EAAab,IAU1CvD,wBAAwBmE,EAAWC,EAAab,GAC/C,MAAMiB,EAAa7E,KAAKwB,cAAcsD,UAAWf,GAAcA,EAAUC,UAAYQ,GAAaT,EAAUG,QAAUO,GAAeV,EAAUI,UAAYP,IACvI,IAAhBiB,IACH7E,KAAKwB,cAAcuD,OAAOF,EAAY,GACtCL,EAAUP,oBAAoBQ,EAAab,IAQ7CvD,qBACCL,KAAKhB,EAAIP,EAAkBuB,KAAKf,WAAY","file":"webComponentBaseClass.js","sourcesContent":["import { createQuickAccess, dashesToCamelCase, camelCaseToDashes } from './tools.js';\n\nconst propertiesKey = Symbol('properties');\n\n/**\n * Create the shadow DOM and attach it to the given web component instance\n * @param {HTMLElement} p_ComponentInstance The web component instance to which we are attaching the shadow DOM\n * @param {string} p_ComponentTemplate The id of the web component template\n */\nfunction createShadowDOM(p_ComponentInstance, p_ComponentTemplate) {\n\t// retrieve the correct template from our map of previously stored templates\n\tconst tempDiv = document.createElement('div');\n\ttempDiv.innerHTML = p_ComponentTemplate.trim();\n\tconst templateInstance = tempDiv.firstChild;\n\n\t// create the shadow DOM root here\n\tconst shadowRoot = p_ComponentInstance.attachShadow({ mode: 'open' });\n\tshadowRoot.appendChild(templateInstance.content.cloneNode(true));\n}\n\n/**\n * Create quick access members for this component. This function will add the possibility to access child elements that have an id, through\n * the $ member, it also allows to do a querySelector on the shadow dom through the $$ function and it will add querySelectorAll through the $$$ function\n * The $$$ function will return the child members as an array and not as an node list\n * @param {webComponentBaseClass} p_ComponentInstance The component for which we are creating the quick access members\n */\nfunction ensureQuickAccess(p_ComponentInstance) {\n\tif (!p_ComponentInstance.$) { // make sure we didn't do this already\n\t\tp_ComponentInstance.$ = createQuickAccess(p_ComponentInstance.shadowRoot, 'id');\n\t\tp_ComponentInstance.$$ = (p_Selector) => p_ComponentInstance.shadowRoot.querySelector(p_Selector);\n\t\tp_ComponentInstance.$$$ = (p_Selector) => Array.from(p_ComponentInstance.shadowRoot.querySelectorAll(p_Selector));\n\t}\n}\n\n/**\n * Initialize the web component after it has been added to the DOM\n * @param {webComponentBaseClass} p_ComponentInstance The component instance we are initializing\n * @param {object} p_Properties The object that contains any web component specific properties\n */\nfunction handleConnected(p_ComponentInstance, p_Properties) {\n\tensureQuickAccess(p_ComponentInstance);\n\tif (p_Properties) {\n\t\tconst originalValues = {};\n\n\t\tObject.keys(p_Properties).forEach((p_PropertyKey) => {\n\t\t\tconst property = p_Properties[p_PropertyKey];\n\t\t\tconst attributeName = camelCaseToDashes(p_PropertyKey);\n\n\t\t\toriginalValues[p_PropertyKey] = p_ComponentInstance[p_PropertyKey];\n\n\t\t\tObject.defineProperty(p_ComponentInstance, p_PropertyKey, {\n\t\t\t\tget() { return p_ComponentInstance[propertiesKey][p_PropertyKey]; },\n\t\t\t\tset(p_Value) {\n\t\t\t\t\tconst oldValue = p_ComponentInstance[propertiesKey][p_PropertyKey];\n\t\t\t\t\tlet toAttribute = (p_ConvertValue) => p_ConvertValue.toString();\n\t\t\t\t\tswitch (property.type) {\n\t\t\t\t\t\tcase Array: p_ComponentInstance[propertiesKey][p_PropertyKey] = (typeof p_Value === 'string') ? JSON.parse(p_Value) : Array.isArray(p_Value) ? p_Value : []; toAttribute = (p_ConvertValue) => JSON.stringify(p_ConvertValue); break;\n\t\t\t\t\t\tcase Boolean: p_ComponentInstance[propertiesKey][p_PropertyKey] = p_Value && p_Value !== 'false'; toAttribute = () => ''; break;\n\t\t\t\t\t\tcase Number: p_ComponentInstance[propertiesKey][p_PropertyKey] = ((p_Value === undefined) ? 0 : Number(p_Value)) || 0; break;\n\t\t\t\t\t\tcase Object: p_ComponentInstance[propertiesKey][p_PropertyKey] = (typeof p_Value === 'string') ? JSON.parse(p_Value) : (typeof p_Value === 'object') ? p_Value : {}; toAttribute = (p_ConvertValue) => JSON.stringify(p_ConvertValue); break;\n\t\t\t\t\t\tcase String: p_ComponentInstance[propertiesKey][p_PropertyKey] = ((p_Value === undefined || p_Value === null) ? '' : String(p_Value)) || ''; break;\n\t\t\t\t\t}\n\t\t\t\t\tif (property.observer) {\n\t\t\t\t\t\tif (typeof property.observer === 'function') {\n\t\t\t\t\t\t\tif (oldValue !== p_ComponentInstance[propertiesKey][p_PropertyKey]) {\n\t\t\t\t\t\t\t\tproperty.observer(p_ComponentInstance, p_ComponentInstance[propertiesKey][p_PropertyKey], oldValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (p_ComponentInstance[property.observer]) {\n\t\t\t\t\t\t\tif (oldValue !== p_ComponentInstance[propertiesKey][p_PropertyKey]) {\n\t\t\t\t\t\t\t\tp_ComponentInstance[property.observer](p_ComponentInstance[propertiesKey][p_PropertyKey], oldValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn(`The observer with the name: '${property.observer}' was not found inside the class for web component ${p_ComponentInstance.constructor.is}. Make sure that you added a public function with the name '${property.observer}' to the class.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (property.reflectToAttribute) {\n\t\t\t\t\t\tif (p_ComponentInstance[propertiesKey][p_PropertyKey]) {\n\t\t\t\t\t\t\tp_ComponentInstance.setAttribute(attributeName, toAttribute(p_ComponentInstance[propertiesKey][p_PropertyKey]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tp_ComponentInstance.removeAttribute(attributeName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\tObject.keys(p_Properties).forEach((p_PropertyKey) => {\n\t\t\tconst property = p_Properties[p_PropertyKey];\n\t\t\tconst attributeName = camelCaseToDashes(p_PropertyKey);\n\t\t\tlet userInitialized;\n\t\t\tlet originalValue = originalValues[p_PropertyKey] || null;\n\n\t\t\tif (originalValue) {\n\t\t\t\tswitch (property.type) {\n\t\t\t\t\tcase Array:\n\t\t\t\t\t\tif (Array.isArray(originalValue)) {\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = originalValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toriginalValue = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Boolean:\n\t\t\t\t\t\tif (typeof originalValue === 'boolean') {\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = originalValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toriginalValue = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Number:\n\t\t\t\t\t\tif (typeof originalValue === 'number') {\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = originalValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toriginalValue = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Object:\n\t\t\t\t\t\tif (typeof originalValue === 'object') {\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = originalValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toriginalValue = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase String:\n\t\t\t\t\t\tif (typeof originalValue === 'string') {\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = originalValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toriginalValue = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* if (originalValue === null)  { */\n\t\t\tif (p_ComponentInstance.hasAttribute(attributeName)) {\n\t\t\t\tuserInitialized = p_ComponentInstance.getAttribute(attributeName);\n\t\t\t}\n\n\t\t\tif (property.reflectToAttribute || p_ComponentInstance[p_PropertyKey] === undefined) {\n\t\t\t\t// use the user specified value if it was specified\n\t\t\t\tif (userInitialized !== undefined) {\n\t\t\t\t\tswitch (property.type) {\n\t\t\t\t\t\tcase Array:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = JSON.parse(userInitialized);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Boolean:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = userInitialized !== 'false';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Number:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = Number(userInitialized);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Object:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = JSON.parse(userInitialized);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase String:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = String(userInitialized);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else { // use the default value\n\t\t\t\t\tswitch (property.type) {\n\t\t\t\t\t\tcase Array:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = property.value || [];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Boolean:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = property.value || false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Number:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = property.value || 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Object:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = property.value || {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase String:\n\t\t\t\t\t\t\tp_ComponentInstance[p_PropertyKey] = property.value || '';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// }\n\t\t});\n\t}\n}\n\nconst base = 'web-component-base-element';\n\nexport class webComponentBaseClass extends HTMLElement {\n\t/**\n\t * Get the name for the web component. Must be implemented by the class that extends from webComponentBaseClass\n\t * @returns {string} The name of the web component\n\t */\n\tstatic get is() { return base; }\n\t/**\n\t * Get the template. This will return empty string by default so the class that extends from this must provide its own template\n\t * This should be HTML code as a string wrapped within a template (e.g. <template>My template content...</template>\n\t * @returns {string} The template to be used with the web component as a string\n\t */\n\tstatic get template() { return ''; }\n\t/**\n\t * Get the properties for this web component. Derived classes can override this if they want to provide properties. By default there are no properties\n\t * @returns {object} The properties object\n\t */\n\tstatic get properties() { return {}; }\n\t/**\n\t * Get an array containing all attributes that have an observer attached\n\t * @returns {array} Array containing all attributes that have an observer\n\t */\n\tstatic get observedAttributes() { return (this.properties) ? Object.keys(this.properties).map((p_Name) => camelCaseToDashes(p_Name)) : []; }\n\n\t/**\n\t * Constructor for this base class\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis[propertiesKey] = {};\n\t\tthis.$ = null;\n\t\tthis.$$ = () => null;\n\t\tthis.$$$ = () => [];\n\t\tconsole.assert(this.constructor.is !== base, 'Error, make sure that the web component implements: static get is() { return \"name-of-your-web-component\"; }');\n\t\tcreateShadowDOM(this, this.constructor.template);\n\t\tthis.eventHandlers = [];\n\t}\n\n\t/**\n\t * Called by the system when the web component has been added to the DOM\n\t */\n\tconnectedCallback() {\n\t\thandleConnected(this, this.constructor.properties);\n\t\t// this function should be implemented INSIDE the derived cass, if you want to do additional initialization after the component gets attached to the DOM\n\t\tif (this.attached) {\n\t\t\tthis.attached();\n\t\t}\n\t\t// this function should be implemented OUTSIDE the derived cass, if you want to do additional initialization after the component gets attached to the DOM\n\t\tif (this.onAttached) {\n\t\t\tthis.onAttached(this);\n\t\t}\n\n\t\t// setter to set the onAttached function, this setter only exist after the component has been attached and replaces the onAttached member\n\t\t// this will make sure that onAttached gets called immediately if the component was already attached\n\t\tObject.defineProperty(this, 'onAttached', {\n\t\t\tget() { return undefined; },\n\t\t\tset(p_Callback) { p_Callback(this); },\n\t\t});\n\t}\n\n\t/**\n\t * Called by the system when the web component has been removed from the DOM\n\t */\n\tdisconnectedCallback() {\n\t\t// this function should be implemented INSIDE the derived class when needed to handle the component being removed from the DOM\n\t\tif (this.detached) {\n\t\t\tthis.detached();\n\t\t}\n\t\t// this function can be implemented OUTSIDE of the derived class, if you want to be notified if the component has been removed from the DOM\n\t\tif (this.onDetached) {\n\t\t\tthis.onDetached(this);\n\t\t}\n\t\t// remove any auto event handler that was added\n\t\tthis.eventHandlers.forEach((p_Handler) => { p_Handler.element.removeEventListener(p_Handler.event, p_Handler.handler); });\n\t}\n\n\t/**\n\t * Called by the system if an attribute value is changed\n\t * @param {string} p_Attribute The name of the attribute that is changed\n\t * @param {*} p_OldValue The old value for the attribute\n\t * @param {*} p_NewValue The new value for the attribute\n\t */\n\tattributeChangedCallback(p_Attribute, p_OldValue, p_NewValue) {\n\t\tconst propertyName = dashesToCamelCase(p_Attribute);\n\t\tensureQuickAccess(this);\n\t\t// boolean are handled differently because the absence of the value also means false and the presence of the value also means true\n\t\tif (this.constructor.properties[propertyName] && this.constructor.properties[propertyName].type === Boolean) {\n\t\t\tp_OldValue = !!(p_OldValue === '' || (p_OldValue && p_OldValue !== 'false'));\n\t\t\tp_NewValue = !!(p_NewValue === '' || (p_NewValue && p_NewValue !== 'false'));\n\t\t}\n\t\t// we set our variable and the setter will handle the rest\n\t\tif (p_OldValue !== p_NewValue) {\n\t\t\tthis[propertyName] = p_NewValue;\n\t\t}\n\t}\n\n\t/**\n\t * Attach an event handler to the given element. This function will automatically clean all event handlers when the web component gets removed from the DOM\n\t * @param {HTMLElement} p_Element The element to which we are attaching the event handler\n\t * @param {string} p_EventName The name of the event (e.g. click, mouse down etc)\n\t * @param {function} p_Callback The handler function to be called for the event\n\t */\n\taddAutoEventListener(p_Element, p_EventName, p_Callback) {\n\t\tif (!this.eventHandlers.find((p_Handler) => p_Handler.element === p_Element && p_Handler.event === p_EventName && p_Handler.handler === p_Callback)) {\n\t\t\tthis.eventHandlers.push({ element: p_Element, event: p_EventName, handler: p_Callback });\n\t\t\tp_Element.addEventListener(p_EventName, p_Callback);\n\t\t}\n\t}\n\n\t/**\n\t * Remove an event handler that was previously attached by a call to addAutoEventListener\n\t * @param {HTMLElement} p_Element The element from which the event will be removed\n\t * @param {string} p_EventName The name of the event to remove\n\t * @param {function} p_Callback The callback that was previously added for the event\n\t */\n\tremoveAutoEventListener(p_Element, p_EventName, p_Callback) {\n\t\tconst eventIndex = this.eventHandlers.findIndex((p_Handler) => p_Handler.element === p_Element && p_Handler.event === p_EventName && p_Handler.handler === p_Callback);\n\t\tif (eventIndex !== -1) {\n\t\t\tthis.eventHandlers.splice(eventIndex, 1);\n\t\t\tp_Element.removeEventListener(p_EventName, p_Callback);\n\t\t}\n\t}\n\n\t/**\n\t * recreate the quick access object using the current content of the shadow dom\n\t * use this when you manually add items to or remove items from the DOM\n\t */\n\trefreshQuickAccess() {\n\t\tthis.$ = createQuickAccess(this.shadowRoot, 'id');\n\t}\n}\n"]}